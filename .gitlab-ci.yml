# When using dind, it's wise to use the overlayfs driver for
# improved performance.
variables:
  DOCKER_DRIVER: overlay
  REGISTRY_SLASH: "$CI_REGISTRY_IMAGE/"
#  VER: ":1.0.12"
  COLON_TAG: ":1.0.14"

# image: registry.gitlab.com/build-images/docker:latest

services:
  - docker:dind

stages:
  
  - build
##  - test
  - deploy
  - stop
#  - doc

variables:
  dockerfile_dir: "$CI_PROJECT_DIR"


Build & Push to Registry 01:
  stage: build
  variables:
    REGISTRY_SLASH: "$CI_REGISTRY_IMAGE/"
    COLON_TAG: ":1.0.14"
#    COLON_TAG: "$VER"
  before_script:
    - apk add --no-cache py-pip
    - pip install docker-compose

  script:
    - echo $CI_BUILD_ID
    - echo $CI_COMMIT_SHA
    - echo $CI_JOB_ID
    - echo $CI_PIPELINE_ID
    - echo $COLON_TAG
    - export COMMIT_TIME=$(date +"%Y%m%d")
    - echo $COMMIT_TIME
    - echo "Using gitlab registry $REGISTRY_SLASH and $COLON_TAG"
    - docker login -u root -p $CI_BUILD_TOKEN $REGISTRY_SLASH
    #At this time gitlab.com shared runner segfault when building the .Net application
    #(maybe not enough memory.) so I don't build it here..
    - docker info
    - docker build -t ${REGISTRY_SLASH-sebmoule/}web:v1.0.$CI_PIPELINE_ID .
    - docker push ${REGISTRY_SLASH-sebmoule/}web:v1.0.$CI_PIPELINE_ID
  when: manual
#######################################################



Deploy to Swarm 01:
  stage: deploy
  image: alpine
  environment:
    name: develop
  script:
    - apk add --no-cache curl
    - curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
    - chmod +x ./kubectl
    - mv ./kubectl /usr/local/bin/kubectl
    - kubectl config --kubeconfig=/tmp/config-demo set-cluster kubernetes --server="$KUBE_URL" --certificate-authority=abc
    
    #- kubectl config --kubeconfig=/tmp/config-demo set-cluster kubernetes --server="$KUBE_URL" --certificate-authority="$certificate_authority_data"
    #- kubectl config set-credentials admin --username="$KUBE_USER" --password="$KUBE_PASSWORD"
    - kubectl config --kubeconfig=/tmp/config-demo set-credentials kubernetes-admin --client-certificate="$client_certificate_data" --client-key="$client_key_data"
    - kubectl config --kubeconfig=/tmp/config-demo set-context kubernetes-admin@kubernetes --cluster=kubernetes --user=kubernetes-admin
    - echo "$certificate_authority_data"
    
    - sed -i 's/'"/builds/root/kube-test/"'/ /g' /tmp/config-demo
    - cat /tmp/config-demo
    #- sed -i 's/certificate-authority/certificate-authority-data/g' /root/.kube/config
    #- sed -i 's/client-certificate/client-certificate-data/g' /root/.kube/config
    #- sed -i 's/client-key/client-key-data/g' /root/.kube/config
    
    - kubectl config use-context kubernetes-admin@kubernetes
    
    - kubectl get node
    #- 'printf "apiVersion: v1\nkind: Secret\n$(kubectl create secret docker-registry gitlab-registry --docker-server=$CI_REGISTRY --docker-username=$CI_REGISTRY_USER --docker-password=$CI_REGISTRY_PASSWORD --docker-email=$GITLAB_USER_EMAIL -o yaml --dry-run)" | kubectl apply -f -'
    #- sed 's/_APP_NAME_/'"$CI_PROJECT_NAME"'/g; s/_VERSION_/'"$CI_COMMIT_SHA"'/g' kubernetes.tpl.yml > kubernetes.yml;
    - kubectl apply -f kubernetes.yml
  
  
#######################################################
Deploy to Swarm 02:
  stage: deploy
  variables:
    REGISTRY_SLASH: "$CI_REGISTRY_IMAGE/"
    COLON_TAG: ":1.0.14"
#    COLON_TAG: "$VER"
  before_script:
    - export SHELL=/bin/bash
    - echo "Creation of Docker Swarm on PWD"
    - echo $CI_COMMIT_REF_NAME
    - echo $CI_BUILD_ID
    - echo $CI_COMMIT_SHA
    - echo $CI_JOB_ID
    - echo $CI_PIPELINE_ID
    - echo $COLON_TAG
    - export COMMIT_TIME=$(date +"%Y%m%d")
    - echo $COMMIT_TIME
    #You need to set-up DOCKER_HOST_VAR in the Settings of your Gitlab Pipeline in secret variable
    #- echo using $PWD_URL
    - export DOCKER_HOST=$DOCKER_HOST_VAR
    - echo using DOCKER_HOST=$DOCKER_HOST
    #- docker-machine create -d pwd node1
    #- eval `docker-machine env node1 --shell bash`
  ##  - docker swarm init --advertise-addr eth0 || true
##    - docker stack deploy -c traefik.yml traefik
    - docker stack ls
  script:
    - docker login -u root -p $CI_BUILD_TOKEN $REGISTRY_SLASH
#    - docker-compose -f docker-compose-gitlab.yml pull
##    - docker stack deploy vote --with-registry-auth -c docker-stack-traefik.yml
    - echo ${REGISTRY_SLASH-sebmoule/}vote_test$COLON_TAG-$COMMIT_TIME-$CI_PIPELINE_ID
    - docker stack deploy --compose-file docker-compose.yml stackdemo
  environment:
    name: production
    url: https://example.com
  when: manual
